/* Copyright (c) 2006-2007 Christopher J. W. Lloyd

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */
#import <Foundation/objc_class.h>
#import <Foundation/objc_sel.h>
#import <objc/Protocol.h>
#import <Foundation/NSZone.h>
#import <Foundation/ObjCException.h>
#import <Foundation/ObjCModule.h>
#import <stdio.h>
#import "objc_cache.h"
#import <objc/deprecated.h>

#ifdef WIN32
#import <windows.h>
#endif
#ifdef SOLARIS
#import <stdarg.h>
#endif

#define INITIAL_CLASS_HASHTABLE_SIZE	256

static inline OBJCHashTable *OBJCClassTable(void) {
   static OBJCHashTable *allClasses=NULL;

   if(allClasses==NULL)
    allClasses=OBJCCreateHashTable(INITIAL_CLASS_HASHTABLE_SIZE);

   return allClasses;
}

static inline OBJCHashTable *OBJCFutureClassTable(void) {
   static OBJCHashTable *allClasses=NULL;
   
   if(allClasses==NULL)
      allClasses=OBJCCreateHashTable(INITIAL_CLASS_HASHTABLE_SIZE);
   
   return allClasses;
}

id objc_getClass(const char *name) {
   // technically, this should call a class lookup callback if class not found (unlike objc_lookUpClass)
   return OBJCHashValueForKey(OBJCClassTable(),name);
}

id objc_getMetaClass(const char *name) {
   Class c=objc_getClass(name);
   return c->isa;
}

id objc_lookUpClass(const char *className) {
   return OBJCHashValueForKey(OBJCClassTable(),className);
}

void objc_addClass(Class class) {
   OBJCRegisterClass(class);
}

Method class_getClassMethod(Class class, SEL selector)
{
	return class_getInstanceMethod(class->isa, selector);
}

int objc_getClassList(Class *buffer, int bufferLen)
{
	OBJCHashEnumerator classes=OBJCEnumerateHashTable(OBJCClassTable());
	int i;
	for(i=0; i<bufferLen; i++)
		buffer[i]=(Class)OBJCNextHashEnumeratorValue(&classes);
	for(;OBJCNextHashEnumeratorValue(&classes)!=0; i++)
		;
	i--;
	return i;
}

// I think this is generated by the compiler
// to get the class pre-posing, since we don't support posing
// just use the normal thing
id objc_getOrigClass(const char *name) {
   return OBJCHashValueForKey(OBJCClassTable(),name);
}

static void OBJCRegisterSelectorsInMethodList(struct objc_method_list *list){
  int i;

  for (i=0;i<list->method_count;i++)
    list->method_list[i].method_name=OBJCRegisterMethod(list->method_list+i);
}

static void OBJCRegisterSelectorsInClass(Class class) {
   struct objc_method_list *cur=NULL;
   
   if(class->info & CLASS_NO_METHOD_ARRAY) {
      // we have been called by via OBJCSymbolTableRegisterClasses; the methodLists pointer really
      // points to a single method list.

      // remember direct-style method lists
      struct objc_method_list *methodLists=(struct objc_method_list *)class->methodLists;
   
      class->methodLists=NULL;
      // just in case this is really an old-style method list setup with a linked list, walk it.
      for(cur=methodLists; cur; cur=cur->obsolete) {
         OBJCRegisterSelectorsInMethodList(cur);
         class_addMethods(class, cur);
      }
      class->info&=~CLASS_NO_METHOD_ARRAY;
   } else {
      // this is a properly setup class; just walk through all method lists and register the selectors
      void *iterator=0;
      while((cur = class_nextMethodList(class, &iterator))) {
         OBJCRegisterSelectorsInMethodList(cur);
      }
      
   }
}

static inline void OBJCInitializeCacheEntryOffset(OBJCMethodCacheEntry *entry){
   entry->offsetToNextEntry=-((long)entry);
}

static void OBJCCreateCacheForClass(Class class){
   if(class->cache==NULL){
    static struct objc_method empty={
     0,NULL,NULL
    };
    int i;
    
    class->cache=NSZoneCalloc(NULL,1,sizeof(OBJCMethodCache));
    
    for(i=0;i<OBJCMethodCacheNumberOfEntries;i++){
     OBJCMethodCacheEntry *entry=class->cache->table+i;
     OBJCInitializeCacheEntryOffset(entry);
     entry->method=&empty;
    }
   }
}

Class objc_getFutureClass(const char *name) {
   // first find if class is already defined
   struct objc_class* ret=OBJCHashValueForKey(OBJCClassTable(), name);

   // maybe there's a future class
   if(!ret) {
      ret=OBJCHashValueForKey(OBJCFutureClassTable(), name);
   }
   if(!ret) {
      // no future class; build one
      ret=NSZoneCalloc(NULL, 1, sizeof(struct objc_class));
      ret->name=strdup(name);
      OBJCHashInsertValueForKey(OBJCFutureClassTable(), ret->name, ret);
   }
   return ret;
}

void objc_setFutureClass(Class cls, const char *name) {
   OBJCHashInsertValueForKey(OBJCFutureClassTable(), strdup(name), cls);
}

void OBJCRegisterClass(Class class) {

   {
      struct objc_class* futureClass=OBJCHashValueForKey(OBJCFutureClassTable(), class->name);

      if(futureClass) {
         memcpy(futureClass, class, sizeof(struct objc_class));
         class=futureClass;
      }
   }
    
   OBJCHashInsertValueForKey(OBJCClassTable(), class->name, class);

   OBJCRegisterSelectorsInClass(class);
   OBJCRegisterSelectorsInClass(class->isa);

   {
    struct objc_protocol_list *protocols;

    for(protocols=class->protocols;protocols!=NULL;protocols=protocols->next){
     unsigned i;

     for(i=0;i<protocols->count;i++){
      OBJCProtocolTemplate *template=(OBJCProtocolTemplate *)protocols->list[i];

      OBJCRegisterProtocol(template);
     }
    }
   }

   OBJCCreateCacheForClass(class);
   OBJCCreateCacheForClass(class->isa);

   if(class->super_class==NULL){
     // Root class
    class->isa->isa=class;
    class->isa->super_class=class;
    class->info|=CLASS_INFO_LINKED;
   }
}

static void OBJCAppendMethodListToClass(Class class, struct objc_method_list *methodList) {
   OBJCRegisterSelectorsInMethodList(methodList);
   class_addMethods(class, methodList);
}

void OBJCRegisterCategoryInClass(Category category,Class class) {
   struct objc_protocol_list *protos;

   if(category->instanceMethods!=NULL)
    OBJCAppendMethodListToClass(class,category->instanceMethods);
   if(category->classMethods!=NULL)
    OBJCAppendMethodListToClass(class->isa,category->classMethods);

   for(protos=category->protocols;protos!=NULL;protos=protos->next){
    unsigned i;

    for (i=0;i<protos->count;i++)
     OBJCRegisterProtocol((OBJCProtocolTemplate *)protos->list[i]);
   }
}

static void OBJCLinkClass(Class class) {
   if(!(class->info&CLASS_INFO_LINKED)){
    Class superClass=objc_lookUpClass((const char *)class->super_class);
	
    if(superClass!=NULL){
     class->super_class=superClass;
     class->info|=CLASS_INFO_LINKED;
     class->isa->super_class=class->super_class->isa;
     class->isa->info|=CLASS_INFO_LINKED;
	}
   }
}

void OBJCLinkClassTable(void) {
   OBJCHashTable *hashTable=OBJCClassTable();
   Class          class;
   OBJCHashEnumerator  state=OBJCEnumerateHashTable(hashTable);

   while((class=OBJCNextHashEnumeratorValue(&state))!=Nil)
    OBJCLinkClass(class);
}

static inline struct objc_method *OBJCLookupUniqueIdInMethodList(struct objc_method_list *list,SEL uniqueId){
   int i;

   for(i=0;i<list->method_count;i++){
    if(((SEL)list->method_list[i].method_name)==uniqueId)
     return list->method_list+i;
   }

   return NULL;
}

static inline struct objc_method *OBJCLookupUniqueIdInOnlyThisClass(Class class,SEL uniqueId){
   void *iterator=0;
   struct objc_method_list *check;
   struct objc_method     *result=NULL;
   
   while((check = class_nextMethodList(class, &iterator))) {
      if((result=OBJCLookupUniqueIdInMethodList(check,uniqueId))) {
         return result;
      }
   }
   return NULL;
}

struct objc_method *class_getInstanceMethod(Class class,SEL uniqueId) {
   struct objc_method *result=NULL;

   for(;class!=NULL;class=class->super_class)
    if((result=OBJCLookupUniqueIdInOnlyThisClass(class,uniqueId))!=NULL)
     break;

   return result;
}

BOOL class_respondsToSelector(Class cls,SEL selector) {
   return (class_getInstanceMethod(cls,selector)!=NULL)?YES:NO;
}

void OBJCInitializeClass(Class class) {
   if(!(class->info&CLASS_INFO_INITIALIZED)){
    if(class->super_class!=NULL)
     OBJCInitializeClass(class->super_class);

    if(!(class->info&CLASS_INFO_INITIALIZED)) {
     SEL         selector=@selector(initialize);
		/* "If a particular class does not implement initialize, the initialize
		 method of its superclass is invoked twice, once for the superclass and 
		 once for the non-implementing subclass." */
     struct objc_method *method=class_getClassMethod(class,OBJCSelectorUniqueId(selector));

     class->info|=CLASS_INFO_INITIALIZED;

     if(method!=NULL)
      method->method_imp(class,selector);
    }
   }
}

// both of these suck, we should be using NSMethodSignature types to extract the frame and create the NSInvocation here
#ifdef SOLARIS
id objc_msgForward(id object,SEL message,...){
   Class       class=object->isa;
   struct objc_method *method;
   va_list     arguments;
   unsigned    i,frameLength,limit;
   unsigned   *frame;
   
   if((method=class_getInstanceMethod(class,OBJCSelectorUniqueId(@selector(_frameLengthForSelector:))))==NULL){
    OBJCRaiseException("OBJCDoesNotRecognizeSelector","%c[%s %s(%d)]", class->info & CLASS_INFO_META ? '+' : '-', class->name,sel_getName(message),message);
    return nil;
   }
   frameLength=method->method_imp(object,@selector(_frameLengthForSelector:),message);
   frame=__builtin_alloca(frameLength);
   
   va_start(arguments,message);
   frame[0]=object;
   frame[1]=message;
   for(i=2;i<frameLength/sizeof(unsigned);i++)
    frame[i]=va_arg(arguments,unsigned);
   
   if((method=class_getInstanceMethod(class,OBJCSelectorUniqueId(@selector(forwardSelector:arguments:))))!=NULL)
    return method->method_imp(object,@selector(forwardSelector:arguments:),message,frame);
   else {
    OBJCRaiseException("OBJCDoesNotRecognizeSelector","%c[%s %s(%d)]", class->info & CLASS_INFO_META ? '+' : '-', class->name,sel_getName(message),message);
    return nil;
   }
}
#else
id objc_msgForward(id object,SEL message,...){
   Class       class=object->isa;
   struct objc_method *method;
   void       *arguments=&object;

   if((method=class_getInstanceMethod(class,OBJCSelectorUniqueId(@selector(forwardSelector:arguments:))))!=NULL)
    return method->method_imp(object,@selector(forwardSelector:arguments:),message,arguments);
   else {
    OBJCRaiseException("OBJCDoesNotRecognizeSelector","%c[%s %s(%d)]", class->info & CLASS_INFO_META ? '+' : '-', class->name,sel_getName(message),message);
    return nil;
   }
}
#endif

id OBJCMessageNil(id object,SEL message,...){
   return nil;
}

// FIX, better allocator
static OBJCMethodCacheEntry *allocateCacheEntry(){
   OBJCMethodCacheEntry *result=NSZoneCalloc(NULL,1,sizeof(OBJCMethodCacheEntry));
   
   OBJCInitializeCacheEntryOffset(result);
   
   return result;
}

static inline void OBJCCacheMethodInClass(Class class,struct objc_method *method) {
   SEL          uniqueId=method->method_name;
   unsigned              index=(unsigned)uniqueId&OBJCMethodCacheMask;
   OBJCMethodCacheEntry *check=((void *)class->cache->table)+index;

   if(check->method->method_name==OBJCNilSelector)
    check->method=method;
   else {
    OBJCMethodCacheEntry *entry=allocateCacheEntry();
    
    entry->method=method;
    
      BOOL success=NO;
      while(!success)
      {
         long offset=0;
         while(offset=check->offsetToNextEntry, ((void *)check)+offset!=NULL)
            check=((void *)check)+offset;

         success=__sync_bool_compare_and_swap(&check->offsetToNextEntry, offset, ((void *)entry)-((void *)check));
      }
   }
}

IMP OBJCLookupAndCacheUniqueIdInClass(Class class,SEL uniqueId){
   struct objc_method *method;

   if((method=class_getInstanceMethod(class,uniqueId))!=NULL){
    OBJCCacheMethodInClass(class,method);
    return method->method_imp;
   }

	return NULL;
}


IMP OBJCInitializeLookupAndCacheUniqueIdForObject(id object,SEL uniqueId){
    Class class=object->isa;
    Class checkInit=(class->info&CLASS_INFO_META)?(Class)object:class;

   if(!(checkInit->info&CLASS_INFO_INITIALIZED))
     OBJCInitializeClass(checkInit);
   
    return OBJCLookupAndCacheUniqueIdInClass(class,uniqueId);
}


static inline BOOL OBJCCallCXXSelector(id self, Class class, SEL selector)
{
	struct objc_method *result=NULL;
	if(!class->super_class)
		return YES;

	if(!OBJCCallCXXSelector(self, class->super_class, selector))
		return NO;
	
	if((result=OBJCLookupUniqueIdInOnlyThisClass(class,selector))!=NULL)
	{
		if(result->method_imp(self, selector))
		{
			return YES;
		}
		else
		{
			object_cxxDestruct(self, class->super_class);
			return NO;
		}
	}
	return YES;
}

BOOL object_cxxConstruct(id self, Class class)
{
	static SEL cxx_constructor=0;
	if(!cxx_constructor)
		cxx_constructor=sel_registerName(".cxx_construct");
	
	if(!self)
		return YES;
	if(class->info&CLASS_HAS_CXX_STRUCTORS)
		return OBJCCallCXXSelector(self, class, cxx_constructor);
	return YES;
}

BOOL object_cxxDestruct(id self, Class class)
{
	static SEL cxx_destructor=0;
	if(!cxx_destructor)
		cxx_destructor=sel_registerName(".cxx_destruct");

	if(!self)
		return YES;
	if(class->info&CLASS_HAS_CXX_STRUCTORS)
		return OBJCCallCXXSelector(self, class, cxx_destructor);
	return YES;
}

const char *class_getName(Class cls) {
   return cls->name;
}

IMP class_getMethodImplementation(Class cls, SEL name) {
   struct objc_method *ret=class_getInstanceMethod(cls, name);
   if(ret) {
      return ret->method_imp;
   }
   return NULL;
}

Class objc_allocateClassPair(Class super_class, const char *name, size_t extraBytes)
{
   struct objc_class * meta_class;
   struct objc_class * new_class;
   struct objc_class * root_class;
	
   // Ensure that the superclass exists and that someone
   // hasn't already implemented a class with the same name
   //
   if (super_class == Nil)
   {
      return Nil;
   }
	
   if (objc_lookUpClass (name) != Nil) 
   {
      return Nil;
   }
	
   // Find the root class
   //
   root_class = super_class;
   while( root_class->super_class != nil )
   {
      root_class = root_class->super_class;
   }
	
   // Allocate space for the class and its metaclass
   //
   new_class = calloc( 2, sizeof(struct objc_class) + extraBytes);
   meta_class = &new_class[1];
	
   // setup class
   new_class->isa      = meta_class;
   new_class->info     = CLS_CLASS;
   meta_class->info    = CLS_META;
	
   // Create a copy of the class name.
   // For efficiency, we have the metaclass and the class itself 
   // to share this copy of the name, but this is not a requirement
   // imposed by the runtime.
   //
   new_class->name = malloc (strlen (name) + 1);
   strcpy ((char*)new_class->name, name);
   meta_class->name = new_class->name;
	
   // Connect the class definition to the class hierarchy:
   // Connect the class to the superclass.
   // Connect the metaclass to the metaclass of the superclass.
   // Connect the metaclass of the metaclass to the metaclass of  the root class.
   //
   new_class->super_class  = super_class;
   meta_class->super_class = super_class->isa;
   meta_class->isa         = (void *)root_class->isa;
	
   // Set the sizes of the class and the metaclass.
   //
   new_class->instance_size = super_class->instance_size;
   meta_class->instance_size = meta_class->super_class->instance_size;
	
   // Finally, register the class with the runtime.
   //
   return new_class;
}

void objc_registerClassPair(Class new_class)
{
   objc_addClass( new_class ); 
}

void OBJCLogMsg(id object,SEL message){
#if 1
   if(object==nil)
    fprintf(stderr,"-[*nil* %s]\n",(char *)message);
   else
    fprintf(stderr,"%c[%s %s]\n",(object->isa->info&CLASS_INFO_META)?'+':'-', object->isa->name,(char *)message);
   fflush(stderr);
#endif
}
